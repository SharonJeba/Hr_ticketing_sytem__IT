import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';

const EmployeeDashboard = () => {
  const [ticketsData, setTicketsData] = useState([]);
  const [remainingLeave, setRemainingLeave] = useState({});
  const [error, setError] = useState('');
  const [authError, setAuthError] = useState(''); // New state for AuthenticationFailed
  const [leaveTypeFilter, setLeaveTypeFilter] = useState('All');
  const [showViewModal, setShowViewModal] = useState(false);
  const [showUpdateModal, setShowUpdateModal] = useState(false);
  const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
  const [showRaiseModal, setShowRaiseModal] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showAuthErrorModal, setShowAuthErrorModal] = useState(false); // New modal state
  const [successMessage, setSuccessMessage] = useState('');
  const [selectedTicket, setSelectedTicket] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    leave_type: '',
    reason: '',
    start_date: '',
    end_date: '',
  });
  const navigate = useNavigate();

  // Fetch employee tickets and remaining leave
  const fetchTickets = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setAuthError('AuthenticationFailed: No authentication token found.');
        setShowAuthErrorModal(true);
        return;
      }
      const response = await axios.get('http://127.0.0.1:8000/api/emp/view', {
        headers: { Authorization: token },
      });
      console.log('Fetch Tickets Response:', response.data);
      setTicketsData(response.data.tickets_data || []);
      setRemainingLeave(response.data.remaining_leave || {});
      setError('');
    } catch (err) {
      console.error('Fetch Tickets Error:', {
        status: err.response?.status,
        data: err.response?.data,
        message: err.message,
      });
      const errorMsg = err.response?.data?.detail || err.response?.data?.error || 'Failed to fetch tickets';
      if (err.response?.status === 401) {
        setAuthError(`AuthenticationFailed: ${errorMsg}`);
        setShowAuthErrorModal(true);
      } else {
        setError(errorMsg);
      }
    }
  };

  // Fetch tickets on mount
  useEffect(() => {
    fetchTickets();
  }, []);

  // Debug tickets, remaining leave, and modal states
  useEffect(() => {
    console.log('Current ticketsData:', ticketsData);
    console.log('Current remainingLeave:', remainingLeave);
    console.log('showSuccessModal:', showSuccessModal, 'successMessage:', successMessage);
    console.log('showAuthErrorModal:', showAuthErrorModal, 'authError:', authError);
    console.log('leaveTypeFilter:', leaveTypeFilter);
  }, [ticketsData, remainingLeave, showSuccessModal, successMessage, showAuthErrorModal, authError, leaveTypeFilter]);

  // Open view ticket modal
  const openViewModal = (ticket) => {
    console.log('Selected Ticket:', ticket);
    setSelectedTicket(ticket);
    setShowViewModal(true);
  };

  // Open update modal with pre-filled data
  const openUpdateModal = () => {
    setFormData({
      leave_type: leaveTypeToNumber(selectedTicket.leave_type),
      reason: selectedTicket.reason || '',
      start_date: selectedTicket.start_date || '',
      end_date: selectedTicket.end_date || '',
    });
    setShowViewModal(false);
    setShowUpdateModal(true);
  };

  // Open raise ticket modal
  const openRaiseModal = () => {
    setFormData({
      leave_type: '',
      reason: '',
      start_date: '',
      end_date: '',
    });
    setShowRaiseModal(true);
  };

  // Map leave type to number for backend (matches LeaveType IDs)
  const leaveTypeToNumber = (leaveType) => {
    const mapping = {
      'PlannedLeave': 3,
      'SickLeave': 2,
      'EmergencyLeave': 1,
    };
    return mapping[leaveType] || '';
  };

  // Map number to leave type for display
  const numberToLeaveType = (number) => {
    const mapping = {
      3: 'PlannedLeave',
      2: 'SickLeave',
      1: 'EmergencyLeave',
    };
    return mapping[number] || '';
  };

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // Handle raise ticket submission
  const handleRaiseTicket = async () => {
    if (isSubmitting) return;
    setIsSubmitting(true);
    try {
      const token = localStorage.getItem('token');
      const payload = {
        leave_type: parseInt(formData.leave_type),
        reason: formData.reason,
        start_date: formData.start_date,
        end_date: formData.end_date,
      };
      console.log('Raise Ticket Payload:', payload);
      const response = await axios.post('http://127.0.0.1:8000/api/emp/reg', payload, {
        headers: { Authorization: token },
      });
      console.log('Raise Ticket Response:', response.data);
      setShowRaiseModal(false);
      setSuccessMessage('Ticket raised successfully');
      setShowSuccessModal(true);
      await fetchTickets();
    } catch (err) {
      console.error('Raise Ticket Error:', {
        status: err.response?.status,
        data: err.response?.data,
        message: err.message,
      });
      const errorMsg = err.response?.data?.detail || err.response?.data?.error || 'Failed to raise ticket';
      if (err.response?.status === 401) {
        setAuthError(`AuthenticationFailed: ${errorMsg}`);
        setShowAuthErrorModal(true);
      } else {
        setError(errorMsg);
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle update ticket submission
  const handleUpdateTicket = async () => {
    if (isSubmitting) return;
    setIsSubmitting(true);
    try {
      const token = localStorage.getItem('token');
      const payload = {
        id: selectedTicket.ticket_id,
        leave_type: parseInt(formData.leave_type),
        reason: formData.reason,
        start_date: formData.start_date,
        end_date: formData.end_date,
      };
      console.log('Update Ticket Payload:', payload);
      const response = await axios.put('http://127.0.0.1:8000/api/emp/reg', payload, {
        headers: { Authorization: token },
      });
      console.log('Update Ticket Response:', response.data);
      setShowUpdateModal(false);
      setSuccessMessage('Ticket updated successfully');
      setShowSuccessModal(true);
      await fetchTickets();
    } catch (err) {
      console.error('Update Ticket Error:', {
        status: err.response?.status,
        data: err.response?.data,
        message: err.message,
      });
      const errorMsg = err.response?.data?.detail || err.response?.data?.error || 'Failed to update ticket';
      if (err.response?.status === 401) {
        setAuthError(`AuthenticationFailed: ${errorMsg}`);
        setShowAuthErrorModal(true);
      } else {
        setError(errorMsg);
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle delete ticket
  const handleDeleteTicket = async () => {
    if (isSubmitting) return;
    setIsSubmitting(true);
    try {
      const token = localStorage.getItem('token');
      const payload = { id: selectedTicket.ticket_id };
      console.log('Delete Ticket Payload:', payload);
      const response = await axios.delete('http://127.0.0.1:8000/api/emp/reg', {
        headers: { Authorization: token },
        data: payload,
      });
      console.log('Delete Ticket Response:', response.data);
      setShowDeleteConfirmModal(false);
      setShowViewModal(false);
      setSuccessMessage('Ticket deleted successfully');
      setShowSuccessModal(true);
      await fetchTickets();
    } catch (err) {
      console.error('Delete Ticket Error:', {
        status: err.response?.status,
        data: err.response?.data,
        message: err.message,
      });
      const errorMsg = err.response?.data?.detail || err.response?.data?.error || 'Failed to delete ticket';
      if (err.response?.status === 401) {
        setAuthError(`AuthenticationFailed: ${errorMsg}`);
        setShowAuthErrorModal(true);
      } else {
        setError(errorMsg);
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // Filter tickets by leave type
  const filteredTickets = leaveTypeFilter === 'All'
    ? ticketsData
    : ticketsData.filter(ticket => ticket.leave_type === leaveTypeFilter);

  // Get unique employee info
  const employeeInfo = ticketsData.length > 0 ? {
    name: ticketsData[0].Employee_Name || 'Unknown',
    role: ticketsData[0].Employee_role || 'Employee',
    email: ticketsData[0].Employee_email || 'Unknown',
  } : { name: 'Unknown', role: 'Employee', email: 'Unknown' };

  return (
    <div className="dashboard-container">
      <style>
        {`
          .dashboard-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #6b7280, #1e3a8a);
            padding: 2rem;
          }

          .dashboard-container .dashboard-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
            max-width: 1200px;
            margin: 0 auto;
            animation: fadeIn 0.5s ease-in;
          }

          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
          }

          .dashboard-container .header-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
          }

          .dashboard-container .employee-header {
            background: #f1f5f9;
            padding: 1rem;
            border-radius: 10px;
            max-width: 300px;
          }

          .dashboard-container .employee-header h3 {
            font-size: 1.8rem;
            color: #1e3a8a;
            margin: 0;
          }

          .dashboard-container .employee-header p {
            font-size: 1rem;
            color: #374151;
            margin: 0;
          }

          .dashboard-container .leave-remaining {
            background: #f1f5f9;
            padding: 1rem;
            border-radius: 10px;
            max-width: 300px;
            text-align: right;
          }

          .dashboard-container .leave-remaining p {
            font-size: 1rem;
            color: #374151;
            margin: 0.5rem 0;
          }

          .dashboard-container h2 {
            font-size: 2.2rem;
            font-weight: 700;
            color: #1e3a8a;
            text-align: center;
            margin-bottom: 1.5rem;
          }

          .dashboard-container .alert-danger {
            font-size: 0.9rem;
            padding: 0.75rem;
            border-radius: 8px;
            background: #fee2e2;
            color: #dc2626;
            border: 1px solid #dc2626;
            text-align: center;
            margin-bottom: 1.5rem;
          }

          .dashboard-container .scrollable-tickets {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 1rem;
            background: #ffffff;
            margin-bottom: 1.5rem;
          }

          .dashboard-container .ticket-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
          }

          .dashboard-container .ticket-card {
            background: #ffffff;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            transition: all 0.2s ease;
            min-width: 0;
            max-width: 100%;
          }

          .dashboard-container .ticket-card:hover {
            filter: brightness(95%);
          }

          .dashboard-container .ticket-card.accepted {
            background: #c8e6c9 !important;
          }

          .dashboard-container .ticket-card.rejected {
            background: #fee2e2 !important;
          }

          .dashboard-container .ticket-info {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            flex: 1;
            min-width: 250px;
          }

          .dashboard-container .ticket-info p {
            margin: 0;
            font-size: 0.9rem;
            color: #374151;
            flex: 1 0 150px;
          }

          .dashboard-container .ticket-info p strong {
            color: #1e3a8a;
          }

          .dashboard-container .actions-container {
            display: flex;
            gap: 0.5rem;
            align-items: center;
            justify-content: flex-end;
            min-width: 100px;
          }

          .dashboard-container .btn-primary, 
          .dashboard-container .btn-secondary, 
          .dashboard-container .btn-success, 
          .dashboard-container .btn-danger, 
          .dashboard-container .btn-info, 
          .dashboard-container .btn-raise, 
          .dashboard-container .btn-approved, 
          .dashboard-container .btn-rejected {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            border-radius: 5px;
            transition: all 0.3s ease;
          }

          .dashboard-container .btn-primary {
            background: linear-gradient(90deg, #3b82f6, #1e40af) !important;
            color: #ffffff !important;
            border: none;
          }

          .dashboard-container .btn-primary:hover {
            background: linear-gradient(90deg, #1e40af, #1e3a8a) !important;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(59, 130, 246, 0.3);
          }

          .dashboard-container .btn-secondary {
            background: linear-gradient(90deg, #6b7280, #4b5563) !important;
            color: #ffffff !important;
            border: none;
          }

          .dashboard-container .btn-secondary:hover {
            background: linear-gradient(90deg, #4b5563, #374151) !important;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(107, 114, 128, 0.3);
          }

          .dashboard-container .btn-success {
            background: linear-gradient(90deg, #10b981, #047857) !important;
            color: #ffffff !important;
            border: none;
          }

          .dashboard-container .btn-success:hover {
            background: linear-gradient(90deg, #047857, #065f46) !important;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(16, 185, 129, 0.3);
          }

          .dashboard-container .btn-danger {
            background: linear-gradient(90deg, #ef4444, #b91c1c) !important;
            color: #ffffff !important;
            border: none;
          }

          .dashboard-container .btn-danger:hover {
            background: linear-gradient(90deg, #b91c1c, #991b1b) !important;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(239, 68, 68, 0.3);
          }

          .dashboard-container .btn-info {
            background: linear-gradient(90deg, #06b6d4, #0891b2) !important;
            color: #ffffff !important;
            border: none;
            padding: 0.4rem 0.8rem;
            font-size: 0.85rem;
          }

          .dashboard-container .btn-info:hover {
            background: linear-gradient(90deg, #0891b2, #0e7490) !important;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(6, 182, 212, 0.3);
          }

          .dashboard-container .btn-raise {
            background: linear-gradient(90deg, #06b6d4, #0891b2) !important;
            color: #ffffff !important;
            border: none;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: 600;
          }

          .dashboard-container .btn-raise:hover {
            background: rgb(14, 77, 109) !important;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(139, 92, 246, 0.3);
          }

          .dashboard-container .btn-approved {
            background: #008000 !important;
            color: #ffffff !important;
            border: none;
            padding: 0.4rem 0.8rem;
            font-size: 0.85rem;
            cursor: not-allowed;
          }

          .dashboard-container .btn-rejected {
            background: #ff4500 !important;
            color: #ffffff !important;
            border: none;
            padding: 0.4rem 0.8rem;
            font-size: 0.85rem;
            cursor: not-allowed;
          }

          .dashboard-container .filter-container {
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
          }

          .dashboard-container .filter-container label {
            font-size: 1rem;
            color: #1e3a8a;
            font-weight: 600;
          }

          .dashboard-container .filter-container select {
            padding: 0.5rem;
            font-size: 0.9rem;
            border-radius: 5px;
            border: 1px solid #d1d5db;
            background: #f1f5f9;
            color: #374151;
            width: 200px;
          }

          .dashboard-container .filter-container select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 5px rgba(59, 130, 246, 0.3);
          }

          .dashboard-container .modal {
            z-index: 1050;
          }

          .dashboard-container .modal-content {
            border-radius: 10px;
            background: #ffffff;
          }

          .dashboard-container .modal-header {
            background: #f1f5f9;
            border-bottom: none;
          }

          .dashboard-container .modal-title {
            color: #1e3a8a;
            font-weight: 600;
          }

          .dashboard-container .modal-body p {
            font-size: 1rem;
            color: #374151;
            margin-bottom: 0.5rem;
          }

          .dashboard-container .modal-body input, 
          .dashboard-container .modal-body select, 
          .dashboard-container .modal-body textarea {
            width: 100%;
            padding: 0.5rem;
            font-size: 0.9rem;
            border-radius: 5px;
            border: 1px solid #d1d5db;
            margin-bottom: 1rem;
          }

          .dashboard-container .modal-body textarea {
            height: 100px;
            resize: vertical;
          }

          .dashboard-container .modal-footer {
            display: flex;
            justify-content: flex-end;
            flex-wrap: wrap;
            gap: 0.5rem;
          }

          .dashboard-container .auth-error-modal .modal-body {
            background: #fee2e2;
            color: #dc2626;
            border: 1px solid #dc2626;
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
          }

          @media (max-width: 768px) {
            .dashboard-container .dashboard-card {
              padding: 1.5rem;
            }

            .dashboard-container h2 {
              font-size: 1.8rem;
            }

            .dashboard-container .employee-header h3 {
              font-size: 1.5rem;
            }

            .dashboard-container .header-container {
              flex-direction: column;
              align-items: flex-start;
            }

            .dashboard-container .employee-header, 
            .dashboard-container .leave-remaining {
              max-width: 100%;
              text-align: left;
            }

            .dashboard-container .scrollable-tickets {
              max-height: 300px;
            }

            .dashboard-container .ticket-card {
              flex-direction: column;
              align-items: flex-start;
            }

            .dashboard-container .ticket-info {
              flex-direction: column;
              gap: 0.5rem;
            }

            .dashboard-container .ticket-info p {
              flex: 1 0 auto;
            }

            .dashboard-container .actions-container {
              width: 100%;
              justify-content: flex-start;
            }

            .dashboard-container .btn-info, 
            .dashboard-container .btn-approved, 
            .dashboard-container .btn-rejected {
              padding: 0.3rem 0.6rem;
              font-size: 0.8rem;
            }

            .dashboard-container .filter-container {
              flex-direction: column;
              align-items: flex-start;
            }

            .dashboard-container .filter-container select {
              width: 100%;
            }
          }
        `}
      </style>
      <div className="dashboard-card">
        <h2>Employee Dashboard - Leave Requests</h2>
        {error && <div className="alert alert-danger">{error}</div>}
        <div className="header-container">
          <div className="employee-header">
            <h3>{employeeInfo.name}</h3>
            <p>Role: {employeeInfo.role}</p>
            <p>Email: {employeeInfo.email}</p>
          </div>
          <div className="leave-remaining">
            <p><strong>Remaining Planned Leave:</strong> {remainingLeave.Remaining_Planned_Leave || '-'}</p>
            <p><strong>Remaining Sick Leave:</strong> {remainingLeave.Remaining_Sick_Leave || '-'}</p>
            <p><strong>Remaining Emergency Leave:</strong> {remainingLeave.Remaining_Emergency_Leave || '-'}</p>
          </div>
        </div>
        <div className="dashboard-content">
          <div className="filter-container">
            <label htmlFor="leaveTypeFilter">Filter by Leave Type:</label>
            <select
              id="leaveTypeFilter"
              value={leaveTypeFilter}
              onChange={(e) => setLeaveTypeFilter(e.target.value)}
            >
              <option value="All">All</option>
              <option value="PlannedLeave">Planned Leave</option>
              <option value="SickLeave">Sick Leave</option>
              <option value="EmergencyLeave">Emergency Leave</option>
            </select>
            <button className="btn btn-raise" onClick={openRaiseModal}>
              Raise Ticket
            </button>
          </div>
          {filteredTickets.length > 0 ? (
            <div className="scrollable-tickets">
              <div className="ticket-container">
                {filteredTickets.map((ticket, index) => (
                  <div
                    key={ticket.ticket_id || index}
                    className={`ticket-card ${ticket.status.toLowerCase()}`}
                    style={{
                      backgroundColor:
                        ticket.status.toLowerCase() === 'accepted'
                          ? '#c8e6c9'
                          : ticket.status.toLowerCase() === 'rejected'
                          ? '#fee2e2'
                          : 'inherit',
                    }}
                  >
                    <div className="ticket-info">
                      <p><strong>Ticket ID:</strong> {ticket.ticket_id || '-'}</p>
                      <p><strong>Leave Type:</strong> {ticket.leave_type || '-'}</p>
                      <p><strong>Start Date:</strong> {ticket.start_date || '-'}</p>
                      <p><strong>End Date:</strong> {ticket.end_date || '-'}</p>
                      <p><strong>Status:</strong> {ticket.status || '-'}</p>
                    </div>
                    <div className="actions-container">
                      <button
                        className="btn btn-info btn-sm"
                        onClick={() => openViewModal(ticket)}
                      >
                        View
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <p>No leave requests found for the selected filter.</p>
          )}
        </div>

        {/* View Ticket Modal */}
        <div className={`modal ${showViewModal ? 'd-block' : 'd-none'}`} tabIndex="-1">
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Ticket Details</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowViewModal(false)}
                ></button>
              </div>
              <div className="modal-body">
                {selectedTicket && (
                  <>
                    <p><strong>Employee Name:</strong> {selectedTicket.Employee_Name || '-'}</p>
                    <p><strong>Employee Role:</strong> {selectedTicket.Employee_role || '-'}</p>
                    <p><strong>Employee Email:</strong> {selectedTicket.Employee_email || '-'}</p>
                    <p><strong>Ticket ID:</strong> {selectedTicket.ticket_id || '-'}</p>
                    <p><strong>Leave Type:</strong> {selectedTicket.leave_type || '-'}</p>
                    <p><strong>Reason:</strong> {selectedTicket.reason || '-'}</p>
                    <p><strong>Start Date:</strong> {selectedTicket.start_date || '-'}</p>
                    <p><strong>End Date:</strong> {selectedTicket.end_date || '-'}</p>
                    <p><strong>Applied At:</strong> {selectedTicket.applied_at || '-'}</p>
                    <p><strong>Status:</strong> {selectedTicket.status || '-'}</p>
                  </>
                )}
              </div>
              <div className="modal-footer">
                {selectedTicket && (
                  <>
                    {selectedTicket.status.toLowerCase() === 'accepted' && (
                      <button className="btn btn-sm btn-approved" disabled>
                        Approved
                      </button>
                    )}
                    {selectedTicket.status.toLowerCase() === 'rejected' && (
                      <button className="btn btn-sm btn-rejected" disabled>
                        Rejected
                      </button>
                    )}
                    {selectedTicket.status.toLowerCase() !== 'accepted' &&
                      selectedTicket.status.toLowerCase() !== 'rejected' && (
                        <>
                          <button
                            type="button"
                            className="btn btn-primary"
                            onClick={openUpdateModal}
                            disabled={isSubmitting}
                          >
                            Update
                          </button>
                          <button
                            type="button"
                            className="btn btn-danger"
                            onClick={() => setShowDeleteConfirmModal(true)}
                            disabled={isSubmitting}
                          >
                            Delete
                          </button>
                        </>
                      )}
                    <button
                      type="button"
                      className="btn btn-secondary"
                      onClick={() => setShowViewModal(false)}
                    >
                      Close
                    </button>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Update Ticket Modal */}
        <div className={`modal ${showUpdateModal ? 'd-block' : 'd-none'}`} tabIndex="-1">
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Update Ticket</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowUpdateModal(false)}
                ></button>
              </div>
              <div className="modal-body">
                <label htmlFor="leave_type">Leave Type:</label>
                <select
                  id="leave_type"
                  name="leave_type"
                  value={formData.leave_type}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Leave Type</option>
                  <option value="3">Planned Leave</option>
                  <option value="2">Sick Leave</option>
                  <option value="1">Emergency Leave</option>
                </select>
                <label htmlFor="reason">Reason:</label>
                <textarea
                  id="reason"
                  name="reason"
                  value={formData.reason}
                  onChange={handleInputChange}
                  required
                />
                <label htmlFor="start_date">Start Date:</label>
                <input
                  type="date"
                  id="start_date"
                  name="start_date"
                  value={formData.start_date}
                  onChange={handleInputChange}
                  required
                />
                <label htmlFor="end_date">End Date:</label>
                <input
                  type="date"
                  id="end_date"
                  name="end_date"
                  value={formData.end_date}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-primary"
                  onClick={handleUpdateTicket}
                  disabled={isSubmitting}
                >
                  Save Changes
                </button>
                <button
                  type="button"
                  className="btn btn-secondary"
                  onClick={() => setShowUpdateModal(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Delete Confirmation Modal */}
        <div className={`modal ${showDeleteConfirmModal ? 'd-block' : 'd-none'}`} tabIndex="-1">
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Confirm Deletion</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowDeleteConfirmModal(false)}
                ></button>
              </div>
              <div className="modal-body">
                <p>Are you sure you want to delete this ticket?</p>
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-danger"
                  onClick={handleDeleteTicket}
                  disabled={isSubmitting}
                >
                  Confirm Delete
                </button>
                <button
                  type="button"
                  className="btn btn-secondary"
                  onClick={() => setShowDeleteConfirmModal(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Raise Ticket Modal */}
        <div className={`modal ${showRaiseModal ? 'd-block' : 'd-none'}`} tabIndex="-1">
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Raise New Ticket</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowRaiseModal(false)}
                ></button>
              </div>
              <div className="modal-body">
                <label htmlFor="leave_type">Leave Type:</label>
                <select
                  id="leave_type"
                  name="leave_type"
                  value={formData.leave_type}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Leave Type</option>
                  <option value="3">Planned Leave</option>
                  <option value="2">Sick Leave</option>
                  <option value="1">Emergency Leave</option>
                </select>
                <label htmlFor="reason">Reason:</label>
                <textarea
                  id="reason"
                  name="reason"
                  value={formData.reason}
                  onChange={handleInputChange}
                  required
                />
                <label htmlFor="start_date">Start Date:</label>
                <input
                  type="date"
                  id="start_date"
                  name="start_date"
                  value={formData.start_date}
                  onChange={handleInputChange}
                  required
                />
                <label htmlFor="end_date">End Date:</label>
                <input
                  type="date"
                  id="end_date"
                  name="end_date"
                  value={formData.end_date}
                  onChange={handleInputChange}
                  required
                />
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-success"
                  onClick={handleRaiseTicket}
                  disabled={isSubmitting}
                >
                  Submit Ticket
                </button>
                <button
                  type="button"
                  className="btn btn-secondary"
                  onClick={() => setShowRaiseModal(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Success Modal */}
        <div className={`modal ${showSuccessModal ? 'd-block' : 'd-none'}`} tabIndex="-1">
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Success</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => {
                    setShowSuccessModal(false);
                    setSuccessMessage('');
                  }}
                ></button>
              </div>
              <div className="modal-body">
                <p>{successMessage}</p>
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-success"
                  onClick={() => {
                    setShowSuccessModal(false);
                    setSuccessMessage('');
                  }}
                >
                  OK
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Authentication Error Modal */}
        <div className={`modal auth-error-modal ${showAuthErrorModal ? 'd-block' : 'd-none'}`} tabIndex="-1">
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Authentication Error</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => {
                    setShowAuthErrorModal(false);
                    setAuthError('');
                    navigate('/login');
                  }}
                ></button>
              </div>
              <div className="modal-body">
                <p className="alert-danger">{authError}</p>
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-danger"
                  onClick={() => {
                    setShowAuthErrorModal(false);
                    setAuthError('');
                    navigate('/login');
                  }}
                >
                  OK
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EmployeeDashboard;